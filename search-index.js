var searchIndex = {};
searchIndex['cssparser'] = {"items":[[0,"","cssparser",""],[1,"Tokenizer","",""],[1,"StylesheetParser","",""],[1,"RuleListParser","",""],[1,"DeclarationListParser","",""],[1,"RGBA","",""],[11,"red","","",0],[11,"green","","",0],[11,"blue","","",0],[11,"alpha","","",0],[2,"Color","",""],[12,"CurrentColor","","",1],[12,"RGBA","","",1],[3,"tokenize","","Returns a Iterator<(ComponentValue, SourceLocation)>"],[3,"parse_stylesheet_rules","","Parse top-level of a CSS stylesheet.\nReturn a Iterator<Result<Rule, SyntaxError>>"],[3,"parse_rule_list","","Parse a non-top level list of rules eg. the content of an @media rule.\nReturn a Iterator<Result<Rule, SyntaxError>>"],[3,"parse_declaration_list","","Parse a list of declarations and at-rules,\nlike @page in CSS 2.1, all declaration lists in level 3\nReturn a Iterator<Result<DeclarationListItem, SyntaxError>>"],[3,"parse_one_rule","","Parse a single rule.\nUsed eg. for CSSRuleList.insertRule()"],[3,"parse_one_declaration","","Parse a single declaration (not an at-rule)\nUsed eg. in @supports"],[3,"parse_one_component_value","","Parse a single component value.\nUsed eg. in attr(foo, color)"],[3,"decode_stylesheet_bytes","","Determine the character encoding of a CSS stylesheet and decode it."],[3,"parse_stylesheet_rules_from_bytes","","Parse stylesheet from bytes."],[3,"parse_nth","","Parse the An+B notation, as found in the ``:nth-child()`` selector.\nThe input is typically the arguments of a function component value.\nReturn Some((A, B)), or None for a syntax error."],[3,"serialize_identifier","",""],[3,"serialize_string","",""],[0,"ast","",""],[1,"NumericValue","cssparser::ast",""],[11,"representation","","",2],[11,"value","","",2],[11,"int_value","","",2],[1,"SourceLocation","",""],[11,"line","","",3],[11,"column","","",3],[1,"Declaration","",""],[11,"location","","",4],[11,"name","","",4],[11,"value","","",4],[11,"important","","",4],[1,"QualifiedRule","",""],[11,"location","","",5],[11,"prelude","","",5],[11,"block","","",5],[1,"AtRule","",""],[11,"location","","",6],[11,"name","","",6],[11,"prelude","","",6],[11,"block","","",6],[1,"SyntaxError","",""],[11,"location","","",7],[11,"reason","","",7],[1,"SkipWhitespaceIterator","",""],[11,"iter_with_whitespace","","",8],[1,"MoveSkipWhitespaceIterator","",""],[2,"ComponentValue","",""],[12,"Ident","","",9],[12,"AtKeyword","","",9],[12,"Hash","","",9],[12,"IDHash","","",9],[12,"String","","",9],[12,"URL","","",9],[12,"Delim","","",9],[12,"Number","","",9],[12,"Percentage","","",9],[12,"Dimension","","",9],[12,"UnicodeRange","","",9],[12,"WhiteSpace","","",9],[12,"Colon","","",9],[12,"Semicolon","","",9],[12,"Comma","","",9],[12,"IncludeMatch","","",9],[12,"DashMatch","","",9],[12,"PrefixMatch","","",9],[12,"SuffixMatch","","",9],[12,"SubstringMatch","","",9],[12,"Column","","",9],[12,"CDO","","",9],[12,"CDC","","",9],[12,"Function","","",9],[12,"ParenthesisBlock","","",9],[12,"SquareBracketBlock","","",9],[12,"CurlyBracketBlock","","",9],[12,"BadURL","","",9],[12,"BadString","","",9],[12,"CloseParenthesis","","",9],[12,"CloseSquareBracket","","",9],[12,"CloseCurlyBracket","","",9],[2,"DeclarationListItem","",""],[12,"Declaration","","",10],[12,"DeclAtRule","","",10],[2,"Rule","",""],[12,"QualifiedRule","","",11],[12,"AtRule","","",11],[2,"ErrorReason","",""],[12,"ErrEmptyInput","","",12],[12,"ErrExtraInput","","",12],[12,"ErrMissingQualifiedRuleBlock","","",12],[12,"ErrInvalidDeclarationSyntax","","",12],[12,"ErrInvalidBangImportantSyntax","","",12],[4,"Node","",""],[6,"SkipWhitespaceIterable","",""],[9,"skip_whitespace","","",13],[6,"MoveSkipWhitespaceIterable","",""],[9,"move_skip_whitespace","","",14],[10,"eq","","",2],[10,"ne","","",2],[10,"eq","","",3],[10,"ne","","",3],[10,"eq","","",9],[10,"ne","","",9],[10,"eq","","",4],[10,"ne","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"eq","","",6],[10,"ne","","",6],[10,"eq","","",10],[10,"ne","","",10],[10,"eq","","",11],[10,"ne","","",11],[10,"eq","","",7],[10,"ne","","",7],[10,"eq","","",12],[10,"ne","","",12],[10,"fmt","","",7],[10,"clone","","",8],[10,"next","","",8],[10,"move_skip_whitespace","collections::vec","",15],[10,"next","cssparser::ast","",16],[6,"ToCss","cssparser",""],[10,"to_css","","",17],[9,"to_css_push","","",17]],"paths":[[1,"RGBA"],[2,"Color"],[1,"NumericValue"],[1,"SourceLocation"],[1,"Declaration"],[1,"QualifiedRule"],[1,"AtRule"],[1,"SyntaxError"],[1,"SkipWhitespaceIterator"],[2,"ComponentValue"],[2,"DeclarationListItem"],[2,"Rule"],[2,"ErrorReason"],[6,"SkipWhitespaceIterable"],[6,"MoveSkipWhitespaceIterable"],[1,"Vec"],[1,"MoveSkipWhitespaceIterator"],[6,"ToCss"]]};
initSearch(searchIndex);
